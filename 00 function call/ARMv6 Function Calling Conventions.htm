<!DOCTYPE html>
<!-- saved from url=(0141)https://developer.apple.com/library/archive/documentation/Xcode/Conceptual/iPhoneOSABIReference/Articles/ARMv6FunctionCallingConventions.html -->
<html lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">

    <title>ARMv6 Function Calling Conventions</title>
    <meta http-equiv="X-UA-Compatible" content="IE=7">
    
    <meta id="book-resource-type" name="book-resource-type" content="Guide">
    <meta scheme="apple_ref" id="identifier" name="identifier" content="//apple_ref/doc/uid/TP40009023">
    <meta id="document-version" name="document-version" content="2.0.4">
    <meta id="build" name="build" content="c1e4c7a89af8f899a21cfa81fc33ba42">
    <meta id="chapterId" name="chapterId" content="TP40009021">
    <meta id="date" name="date" content="2013-09-18">
    <meta id="description" name="description" content="Describes the function-calling conventions used in the architectures supported by iOS.">
    <meta id="book-title" name="book-title" content="iOS ABI Function Call Guide">
    <meta id="book-root" name="book-root" content="../">
    <meta id="book-json" name="book-json" content="../book.json">
    <meta id="devcenter" name="devcenter" content="Mac Dev Center">
    <meta id="devcenter-url" name="devcenter-url" content="http://developer.apple.com/devcenter/mac">
    <meta id="reflib" name="reflib" content="Documentation Archive">
    <meta id="book-assignments" name="book-assignments" content="{Type/Guide}, {Topic/Languages &amp; Utilities}">
    
    
    <meta id="copyright" name="copyright" content="Copyright 2018 Apple Inc. All Rights Reserved.">
    <meta id="xcode-display" name="xcode-display" content="render">
    <meta id="IndexTitle" name="IndexTitle" content="iOS ABI Function Call Guide: ARMv6 Function Calling Conventions">
    <meta id="resources-uri" name="resources-uri" content="../../../../../Resources/1282">
    <link id="book-index-page" rel="Start" title="iOS ABI Function Call Guide" type="text/html" href="https://developer.apple.com/library/archive/documentation/Xcode/Conceptual/iPhoneOSABIReference/index.html">
    <link id="next-page" rel="Next" type="text/html" href="https://developer.apple.com/library/archive/documentation/Xcode/Conceptual/iPhoneOSABIReference/RevisionHistory.html">
    <link id="previous-page" rel="Prev" type="text/html" href="https://developer.apple.com/library/archive/documentation/Xcode/Conceptual/iPhoneOSABIReference/Articles/ARMv7FunctionCallingConventions.html">
    <link rel="stylesheet" type="text/css" href="./ARMv6 Function Calling Conventions_files/screen.css">
    
    <!-- xcode_css -->
    <link rel="stylesheet" type="text/css" href="./ARMv6 Function Calling Conventions_files/feedback.css">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
	<meta id="platforms" name="platforms" content="">
</head>    
<body class="isShowingTOC" id=""><a name="//apple_ref/doc/uid/TP40009021" title="ARMv6 Function Calling Conventions"></a>
    <div id="_omniture_top">
    <!-- SiteCatalyst code version: H.8. Copyright 1997-2006 Omniture, Inc. -->
    <script type="text/javascript">
    /* RSID: */
    var s_account="appleglobal,appleusdeveloper,dappdeveloperlib"
    </script>

    <script type="text/javascript" src="./ARMv6 Function Calling Conventions_files/s_code_h.js"></script>
    <script type="text/javascript">
    s.pageName=AC.Tracking.pageName();
    s.channel="www.us.developer"

    /************* DO NOT ALTER ANYTHING BELOW THIS LINE ! **************/
    var s_code=s.t();if(s_code)document.write(s_code)</script>
    <!-- End SiteCatalyst code version: H.8. -->
    </div>

    <div id="adcHeader" class="hideOnPrint hideInXcode">
        <div id="ssi_Header" class="hideInXcode unified">
            <a id="ssi_LibraryTitle" href="https://developer.apple.com/library/archive/navigation/" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/navigation/_1&quot;;return this.s_oc?this.s_oc(e):true">Documentation Archive</a>
            <a id="ssi_AppleDeveloperConnection" href="https://developer.apple.com/" onclick="s_objectID=&quot;https://developer.apple.com/_1&quot;;return this.s_oc?this.s_oc(e):true">Developer</a>
            <div id="ssi_SearchButton" role="button" title="Search">Search</div>
        </div>
        <form id="ssi_SearchMenu" method="get" action="https://developer.apple.com/library/archive/search/" accept-charset="utf-8">
            <label for="adcsearch">Search Documentation Archive</label>
            
            
    
            <input type="search" id="ssi_SearchField" name="q" accesskey="s" results="5">
        </form>
    </div>

    <header id="header">
        <div id="title" role="banner">
            <h1>iOS ABI Function Call Guide</h1>
            <span id="file_links">
                <a id="PDF_link" role="button" tabindex="4" rel="alternate" title="Download PDF" class=""><span id="pdf_icon"></span>PDF</a>
                <a id="Companion_link" role="button" tabindex="3" title="Download Companion File" class=""><span id="companion_icon"></span>Companion File</a>
            </span>
        </div>
        <ul id="headerButtons" class="hideOnPrint" role="toolbar">
            <li id="toc_button" style="">
                <button tabindex="5" id="table_of_contents" class="open" role="checkbox" aria-label="Show Table of Contents"><span class="disclosure"></span>Table of Contents</button>
            </li>
            <li id="jumpto_button" style="display:none" role="navigation"><select tabindex="6" id="jumpTo"><option value="top">Jump Toâ€¦</option></select></li>
            <li id="downloadSample_button" style="display:none">
                <a id="Sample_link"><button id="Sample_button">Download Sample Code</button></a>
            </li>
        </ul>
    </header>
    <nav id="tocContainer" tabindex="7" class="isShowingTOC">
        <ul id="toc" role="tree"><li class=" " data-aref="//apple_ref/doc/uid/TP40009020-SW1"><span class="nodisclosure"></span><span class="sectionName"><a href="https://developer.apple.com/library/archive/documentation/Xcode/Conceptual/iPhoneOSABIReference/Introduction/Introduction.html#//apple_ref/doc/uid/TP40009020-SW1">Introduction</a></span></li><li class="children " data-aref="//apple_ref/doc/uid/TP40013702-SW1" role="treeitem"><span class="disclosure"></span><span class="sectionName"><a href="https://developer.apple.com/library/archive/documentation/Xcode/Conceptual/iPhoneOSABIReference/Articles/ARM64FunctionCallingConventions.html#//apple_ref/doc/uid/TP40013702-SW1">ARM64 Function Calling Conventions</a></span><ul><li class=" " data-aref="//apple_ref/doc/uid/TP40013702-SW2"><span class="nodisclosure"></span><span class="sectionName"><a href="https://developer.apple.com/library/archive/documentation/Xcode/Conceptual/iPhoneOSABIReference/Articles/ARM64FunctionCallingConventions.html#//apple_ref/doc/uid/TP40013702-SW2">Choices Made Within the Generic Procedure Call Standard</a></span></li><li class="children " data-aref="//apple_ref/doc/uid/TP40013702-SW3" role="treeitem"><span class="disclosure"></span><span class="sectionName"><a href="https://developer.apple.com/library/archive/documentation/Xcode/Conceptual/iPhoneOSABIReference/Articles/ARM64FunctionCallingConventions.html#//apple_ref/doc/uid/TP40013702-SW3">Divergences from the Generic Procedure Call Standard</a></span><ul><li class=" " data-aref="//apple_ref/doc/uid/TP40013702-SW4"><span class="nodisclosure"></span><span class="sectionName"><a href="https://developer.apple.com/library/archive/documentation/Xcode/Conceptual/iPhoneOSABIReference/Articles/ARM64FunctionCallingConventions.html#//apple_ref/doc/uid/TP40013702-SW4">Argument Passing in General</a></span></li><li class=" " data-aref="//apple_ref/doc/uid/TP40013702-SW5"><span class="nodisclosure"></span><span class="sectionName"><a href="https://developer.apple.com/library/archive/documentation/Xcode/Conceptual/iPhoneOSABIReference/Articles/ARM64FunctionCallingConventions.html#//apple_ref/doc/uid/TP40013702-SW5">Variadic Functions</a></span></li><li class=" " data-aref="//apple_ref/doc/uid/TP40013702-SW6"><span class="nodisclosure"></span><span class="sectionName"><a href="https://developer.apple.com/library/archive/documentation/Xcode/Conceptual/iPhoneOSABIReference/Articles/ARM64FunctionCallingConventions.html#//apple_ref/doc/uid/TP40013702-SW6">Fundamental C Types</a></span></li><li class=" " data-aref="//apple_ref/doc/uid/TP40013702-SW7"><span class="nodisclosure"></span><span class="sectionName"><a href="https://developer.apple.com/library/archive/documentation/Xcode/Conceptual/iPhoneOSABIReference/Articles/ARM64FunctionCallingConventions.html#//apple_ref/doc/uid/TP40013702-SW7">Red Zone</a></span></li><li class=" " data-aref="//apple_ref/doc/uid/TP40013702-SW9"><span class="nodisclosure"></span><span class="sectionName"><a href="https://developer.apple.com/library/archive/documentation/Xcode/Conceptual/iPhoneOSABIReference/Articles/ARM64FunctionCallingConventions.html#//apple_ref/doc/uid/TP40013702-SW9">Divergences from the Generic C++ ABI</a></span></li><li class=" " data-aref="//apple_ref/doc/uid/TP40013702-SW10"><span class="nodisclosure"></span><span class="sectionName"><a href="https://developer.apple.com/library/archive/documentation/Xcode/Conceptual/iPhoneOSABIReference/Articles/ARM64FunctionCallingConventions.html#//apple_ref/doc/uid/TP40013702-SW10">Name Mangling</a></span></li><li class=" " data-aref="//apple_ref/doc/uid/TP40013702-SW11"><span class="nodisclosure"></span><span class="sectionName"><a href="https://developer.apple.com/library/archive/documentation/Xcode/Conceptual/iPhoneOSABIReference/Articles/ARM64FunctionCallingConventions.html#//apple_ref/doc/uid/TP40013702-SW11">Other Itanium Divergences</a></span></li></ul></li><li class=" " data-aref="//apple_ref/doc/uid/TP40013702-SW15"><span class="nodisclosure"></span><span class="sectionName"><a href="https://developer.apple.com/library/archive/documentation/Xcode/Conceptual/iPhoneOSABIReference/Articles/ARM64FunctionCallingConventions.html#//apple_ref/doc/uid/TP40013702-SW15">Data Types and Data Alignment</a></span></li></ul></li><li class="children " data-aref="//apple_ref/doc/uid/TP40009022-SW1" role="treeitem"><span class="disclosure"></span><span class="sectionName"><a href="https://developer.apple.com/library/archive/documentation/Xcode/Conceptual/iPhoneOSABIReference/Articles/ARMv7FunctionCallingConventions.html#//apple_ref/doc/uid/TP40009022-SW1">ARMv7 Function Calling Conventions</a></span><ul><li class="children " data-aref="//apple_ref/doc/uid/TP40009022-SW5" role="treeitem"><span class="disclosure"></span><span class="sectionName"><a href="https://developer.apple.com/library/archive/documentation/Xcode/Conceptual/iPhoneOSABIReference/Articles/ARMv7FunctionCallingConventions.html#//apple_ref/doc/uid/TP40009022-SW5">Function Calls</a></span><ul><li class=" " data-aref="//apple_ref/doc/uid/TP40009022-SW6"><span class="nodisclosure"></span><span class="sectionName"><a href="https://developer.apple.com/library/archive/documentation/Xcode/Conceptual/iPhoneOSABIReference/Articles/ARMv7FunctionCallingConventions.html#//apple_ref/doc/uid/TP40009022-SW6">Prologs and Epilogs</a></span></li><li class=" " data-aref="//apple_ref/doc/uid/TP40009022-SW7"><span class="nodisclosure"></span><span class="sectionName"><a href="https://developer.apple.com/library/archive/documentation/Xcode/Conceptual/iPhoneOSABIReference/Articles/ARMv7FunctionCallingConventions.html#//apple_ref/doc/uid/TP40009022-SW7">Register Preservation</a></span></li></ul></li></ul></li><li class="children " data-aref="//apple_ref/doc/uid/TP40009021-SW1" role="treeitem"><span class="disclosure"></span><span class="sectionName"><a href="https://developer.apple.com/library/archive/documentation/Xcode/Conceptual/iPhoneOSABIReference/Articles/ARMv6FunctionCallingConventions.html#//apple_ref/doc/uid/TP40009021-SW1">ARMv6 Function Calling Conventions</a></span><ul><li class=" " data-aref="//apple_ref/doc/uid/TP40009021-SW8"><span class="nodisclosure"></span><span class="sectionName"><a href="https://developer.apple.com/library/archive/documentation/Xcode/Conceptual/iPhoneOSABIReference/Articles/ARMv6FunctionCallingConventions.html#//apple_ref/doc/uid/TP40009021-SW8">Data Types and Data Alignment</a></span></li><li class="children " data-aref="//apple_ref/doc/uid/TP40009021-SW9" role="treeitem"><span class="disclosure"></span><span class="sectionName"><a href="https://developer.apple.com/library/archive/documentation/Xcode/Conceptual/iPhoneOSABIReference/Articles/ARMv6FunctionCallingConventions.html#//apple_ref/doc/uid/TP40009021-SW9">Function Calls</a></span><ul><li class=" " data-aref="//apple_ref/doc/uid/TP40009021-SW10"><span class="nodisclosure"></span><span class="sectionName"><a href="https://developer.apple.com/library/archive/documentation/Xcode/Conceptual/iPhoneOSABIReference/Articles/ARMv6FunctionCallingConventions.html#//apple_ref/doc/uid/TP40009021-SW10">Calling a Function</a></span></li><li class=" " data-aref="//apple_ref/doc/uid/TP40009021-SW11"><span class="nodisclosure"></span><span class="sectionName"><a href="https://developer.apple.com/library/archive/documentation/Xcode/Conceptual/iPhoneOSABIReference/Articles/ARMv6FunctionCallingConventions.html#//apple_ref/doc/uid/TP40009021-SW11">Stack Structure</a></span></li><li class="children " data-aref="//apple_ref/doc/uid/TP40009021-SW12" role="treeitem"><span class="disclosure"></span><span class="sectionName"><a href="https://developer.apple.com/library/archive/documentation/Xcode/Conceptual/iPhoneOSABIReference/Articles/ARMv6FunctionCallingConventions.html#//apple_ref/doc/uid/TP40009021-SW12">Prologs and Epilogs</a></span><ul><li class=" " data-aref="//apple_ref/doc/uid/TP40009021-SW18"><span class="nodisclosure"></span><span class="sectionName"><a href="https://developer.apple.com/library/archive/documentation/Xcode/Conceptual/iPhoneOSABIReference/Articles/ARMv6FunctionCallingConventions.html#//apple_ref/doc/uid/TP40009021-SW18">ARM Mode Examples</a></span></li><li class=" " data-aref="//apple_ref/doc/uid/TP40009021-SW19"><span class="nodisclosure"></span><span class="sectionName"><a href="https://developer.apple.com/library/archive/documentation/Xcode/Conceptual/iPhoneOSABIReference/Articles/ARMv6FunctionCallingConventions.html#//apple_ref/doc/uid/TP40009021-SW19">Thumb Mode Examples</a></span></li></ul></li><li class=" " data-aref="//apple_ref/doc/uid/TP40009021-SW14"><span class="nodisclosure"></span><span class="sectionName"><a href="https://developer.apple.com/library/archive/documentation/Xcode/Conceptual/iPhoneOSABIReference/Articles/ARMv6FunctionCallingConventions.html#//apple_ref/doc/uid/TP40009021-SW14">Passing Arguments</a></span></li><li class=" " data-aref="//apple_ref/doc/uid/TP40009021-SW15"><span class="nodisclosure"></span><span class="sectionName"><a href="https://developer.apple.com/library/archive/documentation/Xcode/Conceptual/iPhoneOSABIReference/Articles/ARMv6FunctionCallingConventions.html#//apple_ref/doc/uid/TP40009021-SW15">Returning Results</a></span></li><li class=" " data-aref="//apple_ref/doc/uid/TP40009021-SW4"><span class="nodisclosure"></span><span class="sectionName"><a href="https://developer.apple.com/library/archive/documentation/Xcode/Conceptual/iPhoneOSABIReference/Articles/ARMv6FunctionCallingConventions.html#//apple_ref/doc/uid/TP40009021-SW4">Register Preservation</a></span></li></ul></li></ul></li><li class=" " data-aref="//apple_ref/doc/uid/TP40009023-CH99-SW1"><span class="nodisclosure"></span><span class="sectionName"><a href="https://developer.apple.com/library/archive/documentation/Xcode/Conceptual/iPhoneOSABIReference/RevisionHistory.html#//apple_ref/doc/uid/TP40009023-CH99-SW1">Revision History</a></span></li></ul>
    </nav>

    <article id="contents" tabindex="0" role="main" class="isShowingTOC">
        <div id="pageNavigationLinks_top" class="pageNavigationLinks">
            <a class="nextLink" rel="next" href="https://developer.apple.com/library/archive/documentation/Xcode/Conceptual/iPhoneOSABIReference/RevisionHistory.html" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/documentation/Xcode/Conceptual/iPhoneOSABIReference/R_1&quot;;return this.s_oc?this.s_oc(e):true">Next</a><a class="previousLink" rel="prev" href="https://developer.apple.com/library/archive/documentation/Xcode/Conceptual/iPhoneOSABIReference/Articles/ARMv7FunctionCallingConventions.html" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/documentation/Xcode/Conceptual/iPhoneOSABIReference/A_1&quot;;return this.s_oc?this.s_oc(e):true">Previous</a>
        </div>
        <a id="top" name="top"></a>
        <a id="INDEX" href="https://developer.apple.com/library/archive/documentation/Xcode/Conceptual/iPhoneOSABIReference/index.html" style="display:none;" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/documentation/Xcode/Conceptual/iPhoneOSABIReference/i_1&quot;;return this.s_oc?this.s_oc(e):true"></a>
        
        <a name="//apple_ref/doc/uid/TP40009021-SW1" title="ARMv6 Function Calling Conventions"></a><h1 id="pageTitle">ARMv6 Function Calling Conventions</h1><p>When functions (routines) call other functions (subroutines), they may need to pass arguments to them. The called subroutines access these arguments as <em class="newTerm">parameters</em>. Conversely, some subroutines pass a <em class="newTerm">result</em> or return value to their callers. In the ARMv6 environment, arguments may be passed on the runtime stack or in registers; in addition, some vector arguments are also passed passed in registers. Results are returned in registers or in memory. To efficiently pass values between callers and callees, GCC follows strict rules when it generates a programâ€™s object code.</p><p>This article describes the data types that can be used to manipulate the arguments and results of subroutine calls, how routines pass arguments to the subroutines they call, and how subroutines that provide a return value pass the result to their callers. This article also lists the registers available in the ARMv6 architecture and whether their value is preserved after a subroutine call.</p><p>The function calling conventions used in the ARMv6 environment are the same as those used in the Procedure Call Standard for the ARM Architecture (release 1.07), with the following exceptions:</p><ul class="ul"><li class="li"><p>The stack is 4-byte aligned at the point of function calls.</p></li><li class="li"><p>Large data types (larger than 4 bytes) are 4-byte aligned.</p></li><li class="li"><p>Register R7 is used as a frame pointer</p></li><li class="li"><p>Register R9 has special usage.</p></li></ul><p>The content of this article is largely based on the content in <em class="newTerm">Procedure Call Standard for the ARM Architecture (AAPCS)</em>, available at <span class="content_text"><a href="http://infocenter.arm.com/help/topic/com.arm.doc.ihi0042c/" class="urlLink" rel="external" onclick="s_objectID=&quot;http://infocenter.arm.com/help/topic/com.arm.doc.ihi0042c/_1&quot;;return this.s_oc?this.s_oc(e):true">http://infocenter.arm.com/help/topic/com.arm.doc.ihi0042c/</a></span></p><section><a name="//apple_ref/doc/uid/TP40009021-SW8" title="Data Types and Data Alignment"></a><h2 class="jump">Data Types and Data Alignment</h2><p>Using the correct data types for your variables helps to maximize the performance and portability of your programs. Data alignment specifies how data is laid out in memory. A data typeâ€™s <em class="newTerm">natural alignment</em> specifies the default alignment of values of that that type.</p><p><span class="content_text">Table 1</span> lists the ANSI C scalar data types and their sizes and natural alignment in this environment.</p><a name="//apple_ref/doc/uid/TP40009021-SW2" title="Table 1Size and natural alignment of the scalar data types"></a><div class="tableholder"><table class="graybox" border="0" cellspacing="0" cellpadding="5"><caption class="tablecaption"><strong class="caption_number">Table 1</strong>&nbsp;&nbsp;Size and natural alignment of the scalar data types</caption><tbody><tr><th scope="col" class="TableHeading_TableRow_TableCell"><p>Data type</p></th><th scope="col" class="TableHeading_TableRow_TableCell"><p>Size (in bytes)</p></th><th scope="col" class="TableHeading_TableRow_TableCell"><p>Natural alignment (in bytes)</p></th></tr><tr><td scope="row"><p><code>_Bool</code>, <code>bool</code></p></td><td><p>1</p></td><td><p>1</p></td></tr><tr><td scope="row"><p><code>unsigned char</code></p></td><td><p>1</p></td><td><p>1</p></td></tr><tr><td scope="row"><p><code>char</code>, <code>signed char</code></p></td><td><p>1</p></td><td><p>1</p></td></tr><tr><td scope="row"><p><code>unsigned short</code></p></td><td><p>2</p></td><td><p>2</p></td></tr><tr><td scope="row"><p><code>signed short</code></p></td><td><p>2</p></td><td><p>2</p></td></tr><tr><td scope="row"><p><code>unsigned int</code></p></td><td><p>4</p></td><td><p>4</p></td></tr><tr><td scope="row"><p><code>int</code>, <code>signed int</code></p></td><td><p>4</p></td><td><p>4</p></td></tr><tr><td scope="row"><p><code>unsigned long</code></p></td><td><p>4</p></td><td><p>4</p></td></tr><tr><td scope="row"><p><code>signed long</code></p></td><td><p>4</p></td><td><p>4</p></td></tr><tr><td scope="row"><p><code>unsigned long long</code></p></td><td><p>8</p></td><td><p>4</p></td></tr><tr><td scope="row"><p><code>signed long long</code></p></td><td><p>8</p></td><td><p>4</p></td></tr><tr><td scope="row"><p><code>float</code></p></td><td><p>4</p></td><td><p>4</p></td></tr><tr><td scope="row"><p><code>double</code></p></td><td><p>8</p></td><td><p>4</p></td></tr><tr><td scope="row"><p><code>long double</code></p></td><td><p>8</p></td><td><p>4</p></td></tr><tr><td scope="row"><p>pointer</p></td><td><p>4</p></td><td><p>4</p></td></tr></tbody></table></div><p>These are some important details about this environment:</p><ul class="ul"><li class="li"><p>A byte is 8 bits long.</p></li><li class="li"><p>A null pointer has a value of <code>0</code>.</p></li><li class="li"><p>This environment uses the little-endian byte ordering scheme to store numeric and pointer data types. That is, the least significant bytes go first, followed by the most significant bytes.</p></li></ul><p>These are the alignment rules followed in this environment:</p><ol class="ol"><li class="li"><p>Scalar data types use their natural alignment.</p></li><li class="li"><p>Composite data types (arrays, structures, and unions) take on the alignment of the member with the highest alignment. An array assumes the same alignment as its elements. The size of a composite data type is a multiple of its alignment (padding may be required).</p></li></ol></section><section><a name="//apple_ref/doc/uid/TP40009021-SW9" title="Function Calls"></a><h2 class="jump">Function Calls</h2><p>The sections that follow detail the process of calling a subroutine and passing parameters to it, and how subroutines return values to their callers.</p><div class="notebox"><aside><a name="//apple_ref/doc/uid/TP40009021-SW20" title="Note"></a><p><strong>Note:</strong>&nbsp;These parameter-passing conventions are part of the Apple standard for procedural programming interfaces. Object-oriented languages may use different rules for their own method calls. For example, the conventions for C++ virtual function calls may be different from those for C functions.</p><p></p></aside></div><section><a name="//apple_ref/doc/uid/TP40009021-SW10" title="Calling a Function"></a><h3 class="jump">Calling a Function</h3><p>In iOS, you can call routines using either the Thumb or the ARM instruction sets. The main difference between these instruction sets is how you set up the stacks and parameter lists. </p><p>All subroutine call and return sequences must support interworking between ARM and Thumb states. This means that you must use the appropriate <code>BLX</code> and <code>BX</code> instructions (instead of the <code>MOV</code> instruction) for all calls to function pointers. For more information about using these instructions in your calls, see the AAPCS document. </p></section><section><a name="//apple_ref/doc/uid/TP40009021-SW11" title="Stack Structure"></a><h3 class="jump">Stack Structure</h3><p>The ARM environment uses a stack thatâ€”at the point of function callsâ€”is 4-byte aligned, grows downward, and contains local variables and a functionâ€™s parameters. <span class="content_text">Figure 1</span> shows the stack before and during a subroutine call. (To help prevent the execution of malicious code on the stack, clang protects the stack against execution.)</p><figure class="figure"><a name="//apple_ref/doc/uid/TP40009021-SW3" title="Figure 1Stack layout"></a><figcaption><strong class="caption_number">Figure 1</strong>&nbsp;&nbsp;Stack layout</figcaption><img src="./ARMv6 Function Calling Conventions_files/arm_stack.jpg" alt="" width="542" height="346"></figure><p>The <em class="newTerm">stack pointer</em> (SP) points to the bottom of the stack. Stack frames contain the following areas:</p><ul class="ul"><li class="li"><p><em class="newTerm">The parameter area</em> stores the arguments the caller passes to the called function or stores space for them, depending on the type of each argument and the availability of registers. This area resides in the callerâ€™s stack frame.</p></li><li class="li"><p><em class="newTerm">The linkage area</em> contains the address of the callerâ€™s next instruction.</p></li><li class="li"><p><em class="newTerm">The saved frame pointer</em> (optional) contains the base address of the callerâ€™s stack frame.</p></li><li class="li"><p>The <em class="newTerm">local storage area</em> contains the subroutineâ€™s local variables and the values of the registers that must be restored before the called function returns. See <span class="content_text"><a href="https://developer.apple.com/library/archive/documentation/Xcode/Conceptual/iPhoneOSABIReference/Articles/ARMv6FunctionCallingConventions.html#//apple_ref/doc/uid/TP40009021-SW4" data-renderer-version="1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/documentation/Xcode/Conceptual/iPhoneOSABIReference/A_2&quot;;return this.s_oc?this.s_oc(e):true">Register Preservation</a></span> for details.</p></li><li class="li"><p>The <em class="newTerm">saved registers area</em> contains the values of the registers that must be restored before the called function returns. See <span class="content_text"><a href="https://developer.apple.com/library/archive/documentation/Xcode/Conceptual/iPhoneOSABIReference/Articles/ARMv6FunctionCallingConventions.html#//apple_ref/doc/uid/TP40009021-SW4" data-renderer-version="1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/documentation/Xcode/Conceptual/iPhoneOSABIReference/A_3&quot;;return this.s_oc?this.s_oc(e):true">Register Preservation</a></span> for details.</p></li></ul><p>In this environment, the stack frame size is not fixed.</p></section><section><a name="//apple_ref/doc/uid/TP40009021-SW12" title="Prologs and Epilogs"></a><h3 class="jump">Prologs and Epilogs</h3><p>The called subroutine is responsible for allocating its own stack frame. This operation is accomplished by a section of code called the <em class="newTerm">prolog</em>, which the compiler places before the body of the function. After the body of the function, the compiler places an <em class="newTerm">epilog</em> to restore the process to the state it was prior to the subroutine call.</p><p>The prolog performs the following tasks:</p><ol class="ol"><li class="li"><p>Pushes the value of the link register (LR) onto the stack.</p></li><li class="li"><p>Pushes the value of the frame pointer (R7) onto the stack.</p></li><li class="li"><p>Sets the frame pointer (R7) to the value of the stack pointer (SP). (Updating R7 in this way gives the debugger a way to find previous stack frames.)</p></li><li class="li"><p>Pushes the values of the registers that must be preserved (see <span class="content_text"><a href="https://developer.apple.com/library/archive/documentation/Xcode/Conceptual/iPhoneOSABIReference/Articles/ARMv6FunctionCallingConventions.html#//apple_ref/doc/uid/TP40009021-SW4" data-renderer-version="1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/documentation/Xcode/Conceptual/iPhoneOSABIReference/A_4&quot;;return this.s_oc?this.s_oc(e):true">Register Preservation</a></span>) onto the stack.</p></li><li class="li"><p>Allocates space in the stack frame for local storage.</p></li></ol><p>The epilog performs these tasks:</p><ol class="ol"><li class="li"><p>Deallocates the space used for local storage in the stack.</p></li><li class="li"><p>Restores the preserved registers (see <span class="content_text"><a href="https://developer.apple.com/library/archive/documentation/Xcode/Conceptual/iPhoneOSABIReference/Articles/ARMv6FunctionCallingConventions.html#//apple_ref/doc/uid/TP40009021-SW4" data-renderer-version="1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/documentation/Xcode/Conceptual/iPhoneOSABIReference/A_5&quot;;return this.s_oc?this.s_oc(e):true">Register Preservation</a></span>) by popping the values saved on the stack by the prolog.</p></li><li class="li"><p>Restores the value of the frame pointer (R7) by popping it from the stack.</p></li><li class="li"><p>Returns by popping the saved link register (LR) into the program counter (PC).</p></li></ol><div class="notebox"><aside><a name="//apple_ref/doc/uid/TP40009021-SW13" title="Note"></a><p><strong>Note:</strong>&nbsp;Not all parts of the prolog and epilog are required. A routine that does not use a register does not need to save it. For example, if a routine does not use high registers (R8, R10, R11) or nonvolatile VFP registers, those registers do not need to be saved. In addition, leaf functions do not need to use the stack at all unless they need to save nonvolatile registers. </p><p></p></aside></div><section><a name="//apple_ref/doc/uid/TP40009021-SW18" title="ARM Mode Examples"></a><h4 class="jump">ARM Mode Examples</h4><p><span class="content_text">Listing 1</span> shows an example of a prolog in ARM mode. In this example, the prolog saves the contents of the VFP registers and allocates an additional 36 bytes of local storage. </p><a name="//apple_ref/doc/uid/TP40009021-SW5" title="Listing 1Example prolog for ARM (ARMv6)"></a><p class="codesample clear"><strong class="caption_number">Listing 1</strong>&nbsp;&nbsp;Example prolog for ARM (ARMv6)</p><div class="codesample clear"><table><tbody><tr><td scope="row"><pre>stmfd     sp!, {r4-r7, lr}       // save LR, R7, R4-R6<span></span></pre></td></tr><tr><td scope="row"><pre>add       r7, sp, #12            // adjust R7 to point to saved R7<span></span></pre></td></tr><tr><td scope="row"><pre>stmfd     sp!, {r8, r10, r11}    // save remaining GPRs (R8, R10, R11)<span></span></pre></td></tr><tr><td scope="row"><pre>fstmfdd   sp!, {d8-d15}          // save VFP registers D8-D15<span></span></pre></td></tr><tr><td scope="row"><pre>                                 //  (aka S16-S31 aka Q4-Q7)<span></span></pre></td></tr><tr><td scope="row"><pre>sub       sp, sp, #36            // allocate space for local storage<span></span></pre></td></tr></tbody></table></div><p><span class="content_text">Listing 2</span> shows an example of an epilog in ARM mode. This example deallocates the local storage and restores the registers saved in the prolog shown in <span class="content_text"><a href="https://developer.apple.com/library/archive/documentation/Xcode/Conceptual/iPhoneOSABIReference/Articles/ARMv6FunctionCallingConventions.html#//apple_ref/doc/uid/TP40009021-SW5" data-renderer-version="1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/documentation/Xcode/Conceptual/iPhoneOSABIReference/A_6&quot;;return this.s_oc?this.s_oc(e):true">Listing 1</a></span>. </p><a name="//apple_ref/doc/uid/TP40009021-SW6" title="Listing 2Example epilog for ARM (ARMv6)"></a><p class="codesample clear"><strong class="caption_number">Listing 2</strong>&nbsp;&nbsp;Example epilog for ARM (ARMv6)</p><div class="codesample clear"><table><tbody><tr><td scope="row"><pre>add       sp, sp, #36            // deallocate space for local storage<span></span></pre></td></tr><tr><td scope="row"><pre>fldmfdd   sp!, {d8-d15}          // restore VFP registers<span></span></pre></td></tr><tr><td scope="row"><pre>ldmfd     sp!, {r8, r10, r11}    // restore R8-R11<span></span></pre></td></tr><tr><td scope="row"><pre>ldmfd     sp!, {r4-r7, pc}       // restore R4-R6, saved R7, return to saved LR<span></span></pre></td></tr></tbody></table></div></section><section><a name="//apple_ref/doc/uid/TP40009021-SW19" title="Thumb Mode Examples"></a><h4 class="jump">Thumb Mode Examples</h4><p><span class="content_text">Listing 3</span> shows an example of a prolog in Thumb. In this example, the prolog does not save nonvolatile VFP registers because Thumb-1 cannot access those registers. </p><a name="//apple_ref/doc/uid/TP40009021-SW16" title="Listing 3Example prolog for Thumb (ARMv6)"></a><p class="codesample clear"><strong class="caption_number">Listing 3</strong>&nbsp;&nbsp;Example prolog for Thumb (ARMv6)</p><div class="codesample clear"><table><tbody><tr><td scope="row"><pre>push     {r4-r7, lr}             // save LR, R7, R4-R6<span></span></pre></td></tr><tr><td scope="row"><pre>mov      r6, r11                 // move high registers to low registers so<span></span></pre></td></tr><tr><td scope="row"><pre>mov      r5, r10                 // they can be saved.  (Can be skipped if the<span></span></pre></td></tr><tr><td scope="row"><pre>mov      r4, r8                  // routine does not use R8, R10 or R11)<span></span></pre></td></tr><tr><td scope="row"><pre>push     {r4-r6}                 // save R8, R10, R11 (now in R4-R6)<span></span></pre></td></tr><tr><td scope="row"><pre>add      r7, sp, #24             // adjust R7 to point to saved R7<span></span></pre></td></tr><tr><td scope="row"><pre>sub      sp, #36                 // allocate space for local storage<span></span></pre></td></tr></tbody></table></div><p><span class="content_text">Listing 4</span> shows a possible epilog in Thumb. This example restores the registers saved in the prolog shown in <span class="content_text"><a href="https://developer.apple.com/library/archive/documentation/Xcode/Conceptual/iPhoneOSABIReference/Articles/ARMv6FunctionCallingConventions.html#//apple_ref/doc/uid/TP40009021-SW16" data-renderer-version="1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/documentation/Xcode/Conceptual/iPhoneOSABIReference/A_7&quot;;return this.s_oc?this.s_oc(e):true">Listing 3</a></span>. </p><a name="//apple_ref/doc/uid/TP40009021-SW17" title="Listing 4Example epilog for Thumb (ARMv6)"></a><p class="codesample clear"><strong class="caption_number">Listing 4</strong>&nbsp;&nbsp;Example epilog for Thumb (ARMv6)</p><div class="codesample clear"><table><tbody><tr><td scope="row"><pre>add      sp, #36                 // deallocate space for local storage<span></span></pre></td></tr><tr><td scope="row"><pre>pop      {r2-r4}                 // pop R8, R10, R11<span></span></pre></td></tr><tr><td scope="row"><pre>mov      r8, r2                  // restore high registers<span></span></pre></td></tr><tr><td scope="row"><pre>mov      r10, r3<span></span></pre></td></tr><tr><td scope="row"><pre>mov      r11, r4<span></span></pre></td></tr><tr><td scope="row"><pre>pop      {r4-r7, pc}             // restore R4-R6, saved R7, return to saved LR<span></span></pre></td></tr></tbody></table></div></section></section><section><a name="//apple_ref/doc/uid/TP40009021-SW14" title="Passing Arguments"></a><h3 class="jump">Passing Arguments</h3><p>The compiler generally adheres to the argument passing rules found in the AAPCS document. You should consult that document for the details of how arguments are passed but the following items are worth noting:</p><ul class="ul"><li class="li"><p>In general, the first four scalar arguments go into the core registers (R0, R1, R2, R3) and any remaining arguments are passed on the stack. This may not always be the case though. For specific details on how arguments are mapped to registers or the stack, see the AAPCS document.</p></li><li class="li"><p>Large data types (larger than 4 bytes) are 4-byte aligned.</p></li><li class="li"><p>For floating-point arguments, the Base Standard variant of the Procedure Call Standard is used. In this variant, floating-point (and vector) arguments are passed in general purpose registers (GPRs) instead of in VFP registers)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40009021-SW15" title="Returning Results"></a><h3 class="jump">Returning Results</h3><p>The compiler generally adheres to the argument passing rules found in the AAPCS document. This means that most values are returned in R0 unless the size of the return value warrants different handling. For more information, see the AAPCS document. </p></section><section><a name="//apple_ref/doc/uid/TP40009021-SW4" title="Register Preservation"></a><h3 class="jump">Register Preservation</h3><p><span class="content_text">Table 2</span> lists the ARM architecture registers used in this environment and their volatility in procedure calls. Registers that must preserve their value after a function call are called <em class="newTerm">nonvolatile</em>. </p><a name="//apple_ref/doc/uid/TP40009021-SW7" title="Table 2Processor registers in the ARMv6 architecture"></a><div class="tableholder"><table class="graybox" border="0" cellspacing="0" cellpadding="5"><caption class="tablecaption"><strong class="caption_number">Table 2</strong>&nbsp;&nbsp;Processor registers in the ARMv6 architecture</caption><tbody><tr><th scope="col" class="TableHeading_TableRow_TableCell"><p>Type</p></th><th scope="col" class="TableHeading_TableRow_TableCell"><p>Name</p></th><th scope="col" class="TableHeading_TableRow_TableCell"><p>Preserved</p></th><th scope="col" class="TableHeading_TableRow_TableCell"><p>Notes</p></th></tr><tr><td scope="row"><p>General-purpose register</p></td><td><p>R0-R3</p></td><td><p>No</p></td><td><p>These registers are used to pass arguments and results. They are available for general use within a routine and between function calls.</p></td></tr><tr><td scope="row"><p></p></td><td><p>R4-R6</p></td><td><p>Yes</p></td><td><p></p></td></tr><tr><td scope="row"><p></p></td><td><p>R7</p></td><td><p>Yes</p></td><td><p>Frame pointer. Usually points to the previously saved stack frame and the saved link register.</p></td></tr><tr><td scope="row"><p></p></td><td><p>R8</p></td><td><p>Yes</p></td><td><p></p></td></tr><tr><td scope="row"><p></p></td><td><p>R9</p></td><td><p>Special</p></td><td><p>R9 has special restrictions that are described below.</p></td></tr><tr><td scope="row"><p></p></td><td><p>R10-R11</p></td><td><p>Yes</p></td><td><p></p></td></tr><tr><td scope="row"><p></p></td><td><p>R12</p></td><td><p>No</p></td><td><p>R12 is the intra-procedure scratch register, also known as IP. It is used by the dynamic linker and is volatile across all function calls. However, it can be used as a scratch register between function calls.</p></td></tr><tr><td scope="row"><p></p></td><td><p>R13</p></td><td><p>Special</p></td><td><p>The stack pointer (SP).</p></td></tr><tr><td scope="row"><p></p></td><td><p>R14</p></td><td><p>Special</p></td><td><p>The link register (LR). Set to the return address on a function call. </p></td></tr><tr><td scope="row"><p></p></td><td><p>R15</p></td><td><p>Special</p></td><td><p>The program counter (PC).</p></td></tr><tr><td scope="row"><p>Program status register</p></td><td><p>CPSR</p></td><td><p>Special</p></td><td><p>The condition bits (27-31) and GE bits (16-19) are not preserved by function calls. The E bit must remain zero (little-endian mode) when calling or returning from a function. The T bit should only be set by a branch routine. All other bits must not be modified.</p></td></tr><tr><td scope="row"><p>VFP register</p></td><td><p>D0-D7</p></td><td><p>No</p></td><td><p>Also known as S0-S15. These registers are not accessible from Thumb mode on ARMv6.</p></td></tr><tr><td scope="row"><p></p></td><td><p>D8-D15</p></td><td><p>Yes</p></td><td><p>Also known as S16-S31. These registers are not accessible from Thumb mode on ARMv6.</p></td></tr><tr><td scope="row"><p>VFP status register</p></td><td><p>FPSCR</p></td><td><p>Special</p></td><td><p>Condition code bits (28-31) and saturation bits (0-4) are not preserved by function calls. Exception control (8-12), rounding mode (22-23), and flush-to-zero (24) bits should be modified only by specific routines that affect the application state (including framework API functions). Short vector length (16-18) and stride (20-21) bits must be zero on function entry and exit. All other bits must not be modified.</p></td></tr></tbody></table></div><p>The following notes should also be taken into consideration regarding register usage:</p><ul class="ul"><li class="li"><p>Although the AAPCS document defines R7 as a general purpose nonvolatile register, iOS uses it as a frame pointer. Failure to use R7 as a frame pointer can prevent debugging and performance tools from generating valid backtraces. In addition, some ARM environments use the mnemonic FP to refer to R11. In iOS, R11 is a general-purpose nonvolatile register. As a result, the term FP is not used to avoid confusion.</p></li><li class="li"><p>In iOS 2.x, register R9 is reserved for operating system use and must not be used by application code. Failure to do so can result in application crashes or aberrant behavior. However, in iOS 3.0 and later, register R9 can be used as a volatile scratch register. These guidelines differ from the general usage provided for by the AAPCS document.</p></li><li class="li"><p>Accessing the VFP registers from Thumb mode (in ARMv6) is not supported. If you need access to the VFP registers, you must run your code in ARM mode. In iOS, switching between ARM and Thumb mode can be done only at function boundaries.  </p></li></ul></section></section>
        <div id="pageNavigationLinks_bottom" class="pageNavigationLinks">
            <a class="nextLink" rel="next" href="https://developer.apple.com/library/archive/documentation/Xcode/Conceptual/iPhoneOSABIReference/RevisionHistory.html" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/documentation/Xcode/Conceptual/iPhoneOSABIReference/R_2&quot;;return this.s_oc?this.s_oc(e):true">Next</a><a class="previousLink" rel="prev" href="https://developer.apple.com/library/archive/documentation/Xcode/Conceptual/iPhoneOSABIReference/Articles/ARMv7FunctionCallingConventions.html" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/documentation/Xcode/Conceptual/iPhoneOSABIReference/A_8&quot;;return this.s_oc?this.s_oc(e):true">Previous</a>
        </div><br>
        <div class="copyright"><br><hr><div align="center"><p class="content_text" lang="en" dir="ltr"> Copyright Â© 2013 Apple Inc. All Rights Reserved.  <a href="http://www.apple.com/legal/internet-services/terms/site.html" target="_blank" onclick="s_objectID=&quot;http://www.apple.com/legal/internet-services/terms/site.html_1&quot;;return this.s_oc?this.s_oc(e):true">Terms of Use</a>   |  <a href="http://www.apple.com/privacy/" target="_blank" onclick="s_objectID=&quot;http://www.apple.com/privacy/_1&quot;;return this.s_oc?this.s_oc(e):true">Privacy Policy</a>  |  Updated: 2013-09-18</p></div></div>

        <div id="pediaWindow">
            <div id="pediaHeader"></div>
            <div id="pediaBody"></div>
        </div>
    </article>

    <div id="blackout">
    <div id="preload"></div>
</div>
<div id="modal" aria-hidden="true">
    <div id="closebox" tabindex="0" aria-label="Close feedback form" role="button"></div>
    <div id="sending" class="hidden">
        <h2 tabindex="0">Sending feedbackâ€¦</h2>
        <div id="sending_img"></div>
    </div>
    <div id="error" class="hidden">
        <h2 tabindex="0">Weâ€™re sorry, an error has occurred.</h2>
        <p>Please try submitting your feedback later.</p>
        <div id="error_icon"></div>
    </div>
    <div id="success" class="hidden">
        <h2 tabindex="0">Thank you for providing feedback!</h2>
        <p>Your input helps improve our developer documentation.</p>
        <div id="thank_you_icon"></div>
    </div>
    
    <form id="feedback" action="https://developer.apple.com/library/archive/documentation/Xcode/Conceptual/iPhoneOSABIReference/Articles/ARMv6FunctionCallingConventions.html#" method="post">
        <div class="left-leaf">
            <h2 id="helpful_title" data-asterisk="a1" tabindex="0">How helpful is this document?</h2>     
            <sup id="a1" class="asterisk" aria-hidden="true">*</sup>

            <div id="star_group" role="radiogroup" aria-required="true">
                <label> 
                    <input class="radio" type="radio" name="helped" value="1"> 
                    Very helpful
                </label>
                <label> 
                    <input class="radio" type="radio" name="helped" value="2"> 
                    Somewhat helpful
                </label>
                <label>
                    <input class="radio" type="radio" name="helped" value="3"> 
                    Not helpful
                </label>
            </div>
        </div>
        <div class="right-leaf">
            <h2>How can we improve this document?</h2>
            <div id="improve" class="checkboxes">
                <label>
                    <input type="checkbox" name="typo"> 
                    Fix typos or links
                </label>
                <label>
                    <input type="checkbox" name="infoIncorrect"> 
                    Fix incorrect information
                </label>
                <label>
                    <input type="checkbox" name="needs_examples"> 
                    Add or update code samples
                </label>
                <label>
                    <input type="checkbox" name="needs_art"> 
                    Add or update illustrations
                </label>
                <label>
                    <input type="checkbox" name="missingInfo"> 
                    Add information about...
                </label>
            </div>
        </div>

        <textarea id="comment" name="problem" cols="70" rows="8" placeholder="Please tell us more about your experience with this document" data-asterisk="a2" required=""></textarea>
        <sup id="a2" class="asterisk" aria-hidden="true">*</sup>

        <p class="fineprint">
            <em aria-hidden="true"><span>*</span> Required information</em>
        </p> 

        <input id="submit" type="button" value="Send">

        <section id="legal">
            <p>
                To submit a product bug or enhancement request, please visit the 
                <a href="https://developer.apple.com/bugreporter/" target="_blank" onclick="s_objectID=&quot;https://developer.apple.com/bugreporter/_1&quot;;return this.s_oc?this.s_oc(e):true">Bug Reporter</a> 
                page.
            </p>
            <p>
                Please read <a href="http://www.apple.com/legal/policies/ideas.html" target="_blank" onclick="s_objectID=&quot;http://www.apple.com/legal/policies/ideas.html_1&quot;;return this.s_oc?this.s_oc(e):true">Apple's Unsolicited Idea Submission Policy</a> 
                before you send us your feedback.
            </p> 
        </section>
    </form>
</div>

    
    <script charset="utf-8" src="./ARMv6 Function Calling Conventions_files/prototype.js"></script>
    <script src="./ARMv6 Function Calling Conventions_files/library.js"></script>


</body></html>